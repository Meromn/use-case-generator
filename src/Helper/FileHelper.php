<?php

namespace Meromn\UseCaseGenerator\Helper;

final class FileHelper
{
    /**
     * @param string $basePath
     * @return bool
     */
    public static function isFolderOrFileExist(string $basePath): bool
    {
        return file_exists($basePath);
    }

    /**
     * @param string $folderPath
     * @return bool
     * @throws \Exception
     */
    public static function createFolderIfNotExist(string $folderPath): bool
    {
        $useCaseFolderAlreadyExist = self::isFolderOrFileExist($folderPath);
        if ($useCaseFolderAlreadyExist) {
            return true;
        }
        return mkdir($folderPath);
    }

    /**
     * @param string $filePath
     * @param string $namespace
     * @param bool $isTestFile
     * @return void
     */
    public static function createFileIfNotExist(
        string $filePath,
        string $namespace,
        bool $isTestFile = false
    ): void {
        $fileExist = self::isFolderOrFileExist($filePath);
        if ($fileExist) {
            return;
        }
        touch($filePath);
        $pathArray = explode('/', $filePath);
        $className = basename(end($pathArray), '.php');
        self::appendBaseTextToFile($filePath, $className, $namespace, $isTestFile);
    }

    /**
     * @param string $filePath
     * @param string $className
     * @param string $namespace
     * @param bool $isTestFile
     * @param string|null $requestName
     * @param string|null $responseName
     * @return void
     */
    public static function appendBaseTextToFile(
        string $filePath,
        string $className,
        string $namespace,
        bool $isTestFile = false,
        string $requestName = null,
        string $responseName = null
    ): void {
        $todo = "// TODO: Change the autogenerated stub";
        $headerFile = "<?php \n\nnamespace $namespace;\n\n";
        if ($responseName !== null && $requestName !== null && $isTestFile === false) {
            $headerFile .= "use $namespace\\$requestName;\n" .
                "use $namespace\\$responseName;\n\n";
        }
        $classNameFile = "final class $className\n{\n";
        $bodyFile = "    public function __construct()\n    {\n        $todo\n    }";

        if ($requestName !== null && $responseName !== null) {
            $bodyFile .= "\n\n    public function execute($requestName $" .
                strtolower($requestName) .
                "): $responseName\n    {\n        return new $responseName(); $todo\n    }";
        }
        if ($isTestFile) {
            $bodyFile = "";
        }
        if ($requestName !== null && $responseName !== null && $isTestFile) {
            $bodyFile = "    public function testExecute(): void\n    {\n        $todo\n    }";
        }
        $endFile = "\n}";
        $string = $headerFile . $classNameFile . $bodyFile . $endFile;
        file_put_contents($filePath, $string);
    }
}