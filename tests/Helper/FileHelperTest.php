<?php

namespace Meromn\UseCaseGenerator\Tests\Helper;

use Meromn\UseCaseGenerator\Helper\FileHelper;
use PHPUnit\Framework\TestCase;

/**
 *
 */
class FileHelperTest extends TestCase
{
    private const BASE_PATH = '/var/PhpUnitTestFolder';
    private const PROJECT_DIR = __DIR__ . '/../..';

    public function testIsFolderOrFileExist(): void
    {
        $projectDirPath = self::PROJECT_DIR;
        $r = FileHelper::isFolderOrFileExist($projectDirPath . '/src');
        self::assertTrue($r);
        $rFalse = FileHelper::isFolderOrFileExist($projectDirPath . 'src/Meromn');
        self::assertFalse($rFalse);
    }

    /**
     * @throws \Exception
     */
    public function testCreateFolderIfNotExist(): void
    {
        $projectDirPath = self::PROJECT_DIR;
        $varDirPath = $projectDirPath . '/var/';
        $r = FileHelper::createFolderIfNotExist($varDirPath);
        $basePath = $projectDirPath . self::BASE_PATH;
        $r = FileHelper::createFolderIfNotExist($basePath);
        if ($r) {
            self::assertTrue(file_exists($basePath));
            self::assertTrue(is_dir($basePath));
        } else {
            self::assertFalse(file_exists($basePath));
            self::assertFalse(is_dir($basePath));
        }
    }

    /**
     * @throws \Exception
     */
    public function testCreateFileIfNotExist(): void
    {
        $projectDirPath = self::PROJECT_DIR;
        $basePath = $projectDirPath . self::BASE_PATH . '/UseCase.php';
        FileHelper::createFileIfNotExist($basePath, 'App\Tests');
        self::assertTrue(file_exists($basePath));
    }

    public function testAppendBaseTextToFile(): void
    {
        $projectDirPath = self::PROJECT_DIR;
        $basePath = $projectDirPath . self::BASE_PATH . '/SecondUseCase.php';
        FileHelper::appendBaseTextToFile($basePath, 'SecondUseCase', 'App\Tests');
        $text = file_get_contents($basePath);
        self::assertIsString($text);
        self::assertStringContainsString('namespace App\Tests;', $text);
        self::assertStringContainsString('class SecondUseCase', $text);
        self::assertStringContainsString('class SecondUseCase', $text);
        $totalString = "<?php \n\nnamespace App\Tests;\n\n" .
            "final class SecondUseCase\n" .
            "{\n    public function __construct()\n    {\n" .
            "        // TODO: Change the autogenerated stub \n    }\n}";
        self::assertEquals($totalString, $text);
    }

    /**
     * @return void
     */
    public static function tearDownAfterClass(): void
    {
        $projectDirPath = self::PROJECT_DIR;
        $basePath = $projectDirPath . self::BASE_PATH;
        self::delTree($basePath);
    }

    /**
     * @param string $dirPath
     * @return void
     */
    private static function delTree(string $dirPath): void
    {
        $files = array_diff(scandir($dirPath), array('.','..'));
        foreach ($files as $file) {
            (is_dir("$dirPath/$file")) ? self::delTree("$dirPath/$file") : unlink("$dirPath/$file");
        }
        rmdir($dirPath);
    }
}